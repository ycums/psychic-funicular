<Window
    x:Class="Pg01.Views.Menu"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
    xmlns:l="http://schemas.livet-mvvm.net/2011/wpf"
    xmlns:vm="clr-namespace:Pg01.ViewModels"
    xmlns:behaviors="clr-namespace:Pg01.Views.Behaviors"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:c="clr-namespace:Pg01.Views.Converters"
    mc:Ignorable="d"
    Left="{Binding X, Mode=TwoWay}" Top="{Binding Y, Mode=TwoWay}"
    Width="{Binding Width, Mode=OneWayToSource}" Height="{Binding Height, Mode=OneWayToSource}"
    SizeToContent="WidthAndHeight"
    Background="Transparent"
    ShowInTaskbar="false"
    WindowStyle="None"
    AllowsTransparency="true"
    Topmost="True"
    Title="Menu" MinHeight="25" MinWidth="25"
    d:DataContext="{d:DesignInstance {x:Type vm:MenuViewModel}}">
    <Window.Opacity>
        <Binding Path="IsMenuVisible">
            <Binding.Converter>
                <c:ValueConverterGroup >
                    <BooleanToVisibilityConverter/>
                    <c:VisibilityToOpacityConverter/>
                </c:ValueConverterGroup>
            </Binding.Converter>
        </Binding>
    </Window.Opacity>
    <i:Interaction.Behaviors>
        <behaviors:NonActiveWindowBehavior />
    </i:Interaction.Behaviors>

    <i:Interaction.Triggers>

        <!--Viewに特別な要件が存在しない限りは、トリガーやアクションの自作にこだわらず積極的にコードビハインドを使いましょう -->
        <!--Viewのコードビハインドは、基本的にView内で完結するロジックとViewModelからのイベントの受信(専用リスナを使用する)に限るとトラブルが少なくなります -->
        <!--Livet1.1からはコードビハインドでViewModelのイベントを受信するためのWeakEventLisnterサポートが追加されています -->

        <!--WindowのContentRenderedイベントのタイミングでViewModelのInitializeメソッドが呼ばれます-->
        <i:EventTrigger EventName="ContentRendered">
            <l:LivetCallMethodAction MethodTarget="{Binding}" MethodName="Initialize" />
        </i:EventTrigger>

        <!--Windowが閉じたタイミングでViewModelのDisposeメソッドが呼ばれます-->
        <i:EventTrigger EventName="Closed">
            <l:DataContextDisposeAction />
        </i:EventTrigger>
        <!--WindowのCloseキャンセル処理に対応する場合は、WindowCloseCancelBehaviorの使用を検討してください-->
    </i:Interaction.Triggers>

    <Grid>
        <ItemsControl MinHeight="20" ItemsSource="{Binding Buttons}"
                      Height="{Binding ButtonsContainerHeight}"
                      Width="{Binding ButtonsContainerWidth}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <Canvas />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemContainerStyle>
                <Style TargetType="{x:Type ContentPresenter}">
                    <Setter Property="Canvas.Left" Value="{Binding X}" />
                    <Setter Property="Canvas.Top" Value="{Binding Y}" />
                    <Setter Property="Height" Value="{Binding Height}" />
                    <Setter Property="Width" Value="{Binding Width}" />
                </Style>
            </ItemsControl.ItemContainerStyle>
            <ItemsControl.ItemTemplate>
                <DataTemplate>
                    <Button
                        IsEnabled="{Binding Enabled}"
                        Foreground="{Binding Foreground}"
                        Background="{Binding Background}"
                        Command="{Binding ButtonCommand}">
                        <TextBlock Text="{Binding LabelText}" TextWrapping="Wrap" TextAlignment="Center" />
                    </Button>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
    </Grid>
</Window>